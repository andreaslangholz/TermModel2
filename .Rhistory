# Regressing the value evolvement for each type over time
for (m in 1:n.types) {
val.vec <- as.matrix(as.vector(value.functions.tilde[m,1:n.neighborhoods, ]))
temp <- as.matrix(cbind(val.vec, crime.vec, poll.vec))
lag1 <- rbind(matrix(0, nrow = n.neighborhoods,3), temp[1:(nrow(temp) - n.neighborhoods), ])
lag2 <- rbind(matrix(0, nrow = (n.neighborhoods * 2), 3), temp[1:(nrow(temp) - n.neighborhoods * 2), ])
lags <- cbind(lag1, lag2)
Y <- temp[(2 * n.neighborhoods + 1):nrow(temp), 1]
X <- cbind(dummy, dummy.time, lags[(2 * n.neighborhoods + 1):nrow(lags), ])
beta.m[, m] <- solve(t(X) %*% X) %*% t(X) %*% Y
res.m[, m]  <- Y - X %*% beta.m[ ,m]
# We find the parameters for the outside option, as we do not have other regressors than the valuefunctions
val.vec.out = as.matrix(as.vector(value.functions.tilde[m, n.neighborhoods + 1, ]))
lag1 <- rbind(matrix(0, 1, 1), as.matrix(val.vec.out[1:(nrow(val.vec.out) - 1), ]))
lag2 <- rbind(matrix(0, 2, 1), as.matrix(val.vec.out[1:(nrow(val.vec.out) - 2), ]))
lags <- cbind(lag1, lag2)
Y <- val.vec.out[(2 + 1):nrow(val.vec.out), 1]
X <- cbind(matrix(1,length(Y),1), matrix(3:(n.periods),n.periods - 2, 1), lags[(2 + 1):nrow(val.vec.out), ])
beta.o[, m] <- solve(t(X) %*% X) %*% t(X) %*% Y
res.o[, m]  <- Y - X %*% beta.o[, m]
}
beta.o[3, 4] * value.functions.tilde[4, n.neighborhoods + 1,4] +
beta.o[4, 4] * value.functions.tilde[4,n.neighborhoods + 1, max(4 - 1 , 1)] +
beta.o[2, 4] * (4 + 1) + beta.o[1,4]
type.val     <- array(NA, dim = c(n.types, n.neighborhoods, n.periods))
type.val.out <- array(NA, dim = c(n.types, n.periods))
for (m in 1:n.types) {
for (t in 1:n.periods) {
type.val[m, , t] <- t(rbind(t(value.functions.tilde[m,1:n.neighborhoods,t]),
df.crime[1:n.neighborhoods, t], df.pollution[n.neighborhoods, t])) %*% alpha11[, m] +
t(rbind(t(value.functions.tilde[m,1:n.neighborhoods,max(t - 1,1)]),
df.crime[1:n.neighborhoods, max(t - 1,1)], df.pollution[n.neighborhoods, max(t - 1,1)])) %*% alpha12[, m] +
kappa0[ ,m] + kappa1[ ,m] * (t + 1)
type.val.out[m, t] <- beta.o[3,m] * value.functions.tilde[m, n.neighborhoods + 1,t] +
beta.o[4,m] * value.functions.tilde[m,n.neighborhoods + 1, max(t-1,1)] +
beta.o[2,m] * (t + 1) + beta.o[1,m]
}
}
gammafmctau
gammafmctau   <- rep(0,n.types)
m.tau   <- rep(0,n.types)
pmc.inv <- matrix(0, n.types ,1)
for (m in 1:n.types){
gammafmctau[m] <- (gamma.fmc[1] * type.comb[m,"wealth"] + gamma.fmc[2] * type.comb[m,"income"])
m.tau[m]   <- gammafmctau[m] * type.comb[m, "wealth"]
pmc.inv[m] <- (gamma.pmc[1] * type.comb[m,"wealth"] + gamma.pmc[2] * type.comb[m,"income"])
}
gammafmctau
f.moving <- value - meanprice[, t] - moving.costs * value
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), type.val.out[ ,t] + value.res.out[, r]
exp.value <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
dim(meanprices)
meanprices[,7]
df.crime[,7]
df.pollution[,7]
cbind(meanprices[, t], df.pollution[, t], df.crime[, t]) %*% gamma11
(cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1]) %*% gamma12
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1]) %*% t(gamma12)
t(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% t(gamma12)
t(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12
gamma12
gamma12 <- beta.price[(2 * n.neighborhoods + 4):(2 * n.neighborhoods + 6), ]
t(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1]) %*% gamma12
gamma12
beta.m <- as.data.frame(matrix(0, 16, n.types))
res.m  <- as.data.frame(matrix(0, (n.periods - n.lags) * n.neighborhoods, n.types))
beta.o <- as.data.frame(matrix(0, 4, 9))
res.o  <- as.data.frame(matrix(0, 8, n.types))
beta.price <- as.data.frame(matrix(0, 16, 1))
res.price  <- as.data.frame(matrix(0, (n.periods-n.lags)*n.neighborhoods, 1))
# Regressing the value evolvement for each type over time
for (m in 1:n.types) {
val.vec <- as.matrix(as.vector(value.functions.tilde[m,1:n.neighborhoods, ]))
temp <- as.matrix(cbind(val.vec, crime.vec, poll.vec))
lag1 <- rbind(matrix(0, nrow = n.neighborhoods,3), temp[1:(nrow(temp) - n.neighborhoods), ])
lag2 <- rbind(matrix(0, nrow = (n.neighborhoods * 2), 3), temp[1:(nrow(temp) - n.neighborhoods * 2), ])
lags <- cbind(lag1, lag2)
Y <- temp[(2 * n.neighborhoods + 1):nrow(temp), 1]
X <- cbind(dummy, dummy.time, lags[(2 * n.neighborhoods + 1):nrow(lags), ])
beta.m[, m] <- solve(t(X) %*% X) %*% t(X) %*% Y
res.m[, m]  <- Y - X %*% beta.m[ ,m]
# We find the parameters for the outside option, as we do not have other regressors than the valuefunctions
val.vec.out = as.matrix(as.vector(value.functions.tilde[m, n.neighborhoods + 1, ]))
lag1 <- rbind(matrix(0, 1, 1), as.matrix(val.vec.out[1:(nrow(val.vec.out) - 1), ]))
lag2 <- rbind(matrix(0, 2, 1), as.matrix(val.vec.out[1:(nrow(val.vec.out) - 2), ]))
lags <- cbind(lag1, lag2)
Y <- val.vec.out[(2 + 1):nrow(val.vec.out), 1]
X <- cbind(matrix(1,length(Y),1), matrix(3:(n.periods),n.periods - 2, 1), lags[(2 + 1):nrow(val.vec.out), ])
beta.o[, m] <- solve(t(X) %*% X) %*% t(X) %*% Y
res.o[, m]  <- Y - X %*% beta.o[, m]
}
price.vec <- as.matrix(as.vector(as.matrix(meanprices[1:n.neighborhoods, ])))
temp.t    <- as.matrix(cbind(price.vec, crime.vec, poll.vec))
lag1      <- rbind(matrix(0,nrow = n.neighborhoods, 3), temp.t[1:(nrow(temp.t) - n.neighborhoods), ])
lag2      <- rbind(matrix(0,nrow = (n.neighborhoods * 2), 3), temp.t[1:(nrow(temp.t) - n.neighborhoods * 2), ])
lags      <- cbind(lag1, lag2)
Y <- temp.t[(2 * n.neighborhoods + 1):nrow(temp.t), 1]
X <- cbind(dummy, dummy.time, lags[(2 * n.neighborhoods + 1):nrow(lags), ])
beta.price[, m] <- solve(t(X) %*% X) %*% t(X) %*% Y
res.price[, m]  <- Y - X %*% beta.o[, m]
beta.price[, m] <- ginv(t(X) %*% X) %*% t(X) %*% Y
res.price[, m]  <- Y - X %*% beta.price[, m]
beta.price <- ginv(t(X) %*% X) %*% t(X) %*% Y
res.price  <- Y - X %*% beta.price[, m]
res.price  <- Y - X %*% beta.price
beta.price
gamma11 <- beta.price[(2 * n.neighborhoods + 1):(2 * n.neighborhoods + 3), ]
gamma12 <- beta.price[(2 * n.neighborhoods + 4):(2 * n.neighborhoods + 6), ]
cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1]) %*% gamma12
(cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
pmc.inv
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res.out[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
for (t in 2:n.periods) {
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[, ,r]), (type.val.out[ ,t] + value.res.out[, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
dim(value.res)
dim(type.val)
type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r]))
type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r]
type.val[ , ,5] + value.res[,1:n.neighborhoods,r]
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = rbind((type.val[ , ,t] + value.res[,1:n.neighborhoods,r]), (type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprice[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
(type.val[ , ,t] + value.res[,1:n.neighborhoods,r])
(type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r])
cbind((type.val[ , ,t] + value.res[,1:n.neighborhoods,r]),
(type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r]))
R = 100
for (t in 2:n.periods) {
# Estimer prisudviklingen givet af regressionerne
price.time.t <- (cbind(meanprices[, t], df.pollution[, t], df.crime[, t])) %*% gamma11 +
(cbind(meanprices[, t - 1], df.pollution[, t - 1], df.crime[, t - 1])) %*% gamma12 + omega0 + omega1 %*% (t + 1)
# Find de psykologiske omkostninger
exp.pmc.time <- exp(pmc.inv[t] + mc.timetrend %*% t)
# Draw residuals from the priceregression
taures = matrix(0,n.neighborhoods, R)
for (j in 1:n.neighborhoods) {
taures.ind  <- sample(R, R)
taures[j, ] <- pricedraws[taures.ind]
}
# Draw residuals from valueregressions
value.res <- array(0,dim = c(n.types, n.neighborhoods + 1, R))
for (m in n.types) {
# Inside decision draws
for (j in n.neighborhoods){
value.res.ind     <- sample(R, R)
value.res[m, j, ] <- resinsidedraws[m, value.res.ind]
}
# Outside decision draws
value.res.out.ind <- sample(R, R)
value.res[m , n.neighborhoods +1, ] <- resoutsidedraws[m, value.res.out.ind]
}
for (r in 1:R){
price.and.res <- price.time.t + taures[, r]
value = cbind((type.val[ , ,t] + value.res[,1:n.neighborhoods,r]), (type.val.out[ ,t] + value.res[,n.neighborhoods + 1, r]))
expvalue <- exp(value) # skal muligvis transponeres
f.moving <- value - meanprices[, t] - moving.costs * value
egamma.fmoving <- exp(f.moving %*% gammafmctau)
#fm = wealthprtemp - meanpricecs(:,t)-.06*wealthprtemp;
#efmu = exp(fm*gammafmctau)
#          fs = wealthprtemp - meanpricecs(:,t);
#         efsu = exp(fs*gammafmctau
}
}
value - meanprices[, t] - moving.costs * value
meanprices
value - t(meanprices[, t]) - moving.costs * value
value
t(value) - meanprices[, t]
t(value) - rbind(meanprices[, t],matrix(0,1,n.periods))
rbind(meanprices[, t],matrix(0,1,n.periods))
meanprices
meanprices[,t]
value
t(value) - meanprices[, t]
t(value) - meanprices[, t] - moving.costs * t(value)
price.and.res - meanprices[,t] - 0.06*price.and.res
exp(c %*% gammafmctau)
c <- price.and.res - meanprices[,t] - 0.06*price.and.res
exp(c %*% gammafmctau)
c %*% gammafmctau
